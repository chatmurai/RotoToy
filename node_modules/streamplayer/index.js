'use strict';
const mkfifoSync = require('mkfifo').mkfifoSync;
const mpg321 = require('mpg321');
const tmp = require('tmp');
const EventEmitter = require('events');
const fs = require('fs');

class StreamPlayer extends EventEmitter {
    constructor() {
        super();
        this.tmpdir = tmp.dirSync({
            mode: 0o700,
            prefix: 'streamPlay',
            unsafeCleanup: true
        });
        this.player = new mpg321().remote();
        this.player.on('end', this._onEnd);
        this.player.on('frame', this._onFrame);
        this._fn = null;
    }

    _onEnd() {
        if (this._fn) {
            fs.unlink(this._fn);
            this.player.quit();
            this._fn = null;
        }
    }

    _onFrame(info) {
        let current_frame = info[0];
        let frames_remaining = info[1];
        let current_time = info[2];
        let time_remaining = info[3];

        this.emit('progress', {
            progress: Math.floor(100 % current_frame / (frames_remaining + current_frame)),
            current_time,
            time_remaining
        });
    }

    play(stream) {
        if (this._fn) {
            this.player.stop();
            fs.unlink(this._fn);
            this._fn = null;
        }
        let path = tmp.tmpNameSync({dir: this.tmpdir.name, postfix: '.mp3'});
        mkfifoSync(path, 0o600);
        let str = fs.createWriteStream(path);
        stream.pipe(str);
        debugger;
        this.player.play(path);
    }
}


module.exports = StreamPlayer;
